Полезные ссылки:
http://thewebland.net/development/devops/rabbitmq/nastrojka-klastera-rabbitmq-na-docker/
https://docs.docker.com/samples/library/rabbitmq
https://hub.docker.com/_/rabbitmq/

Для работы RabbitMQ необходимо открыть порты 5671, 5672.

Для конфига в контейнере можно:
1) Монтировать в контейнер конфигурационные файлы в необходимый путь.
Например: "/etc/rabbitmq/", "/var/lib/rabbitmq", "/var/log/rabbitmq".
Конфигурационные файлы написаны в нотации ЯП Erlang (на нём же написан
и сам RabbitMQ). Здесь можно уточнить параметры для конфигурационного файла:
https://www.rabbitmq.com/configure.html#configuration-files
Пример конфигурациооного файла:
https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.config.example
2) Некоторые настройки можно задать через переменные окружения.
Есть переменные окружения, специфичные для образа в докере, и те, 
которые относятся также и к rabbitmq в целом. Здесь можно уточнить
переменные окружения:
https://docs.docker.com/samples/library/rabbitmq/#environment-variables
https://www.rabbitmq.com/configure.html#customise-environment
3) Некоторые параметры можно задать в командной строке при 
создании контейнера с rabbitmq (ВАЖНО: это параметры не docker'а, 
а самого rabbitmq), либо после запуска приложения при помощи
плагина управления (management plugin) через веб-интерфейс или 
при помощи командной строки (rabbitmqctl).

Приоритет:
Конфигурационные файлы имеют больший приоритет перед стандартными настройками.
Переменные окружения имеют больший приоритет перед конфигурационными файлами.
Параметры, заданные в командной строке, имеют больший приоритет, чем
переменные окружения.
Таким образом, наибольший приоритет имеют параметры, заданные в командной
строке, наименьший - стандартные настройки.

Кластеризация.
https://www.rabbitmq.com/clustering.html
Для работы кластера необходимо открыть ряд портов, какие именно - 
смотри по ссылке выше.
Можно задавать узлы кластера в конфигурационном файле.
Для подключения нового узла в кластер в реальном времени
следует использовать rabbitmqctl, либо при его размещении 
явно указать его.
Для кластеризации необходимо предоставлять особый ключ, который должен 
совпадать на всех узлах кластера. Этот ключ называется 
"erlang cookie". Предлагаемый способ его генерации - подсчёт 
контрольной суммы sha-256 от какой-нибудь строки, например, 
"Heedbook on premise clustering key". Этот ключ необходимо хранить в файле
"/var/lib/rabbitmq/.erlang.cookie" (обычный путь для UNIX-like систем).
В случае кластеризации через контейнеры ключ можно записать в 
переменную окружения "RABBITMQ_ERLANG_COOKIE". Этот способ задания ключа
имеет больший приоритет, чем конфигурационный файл.
Для подключения к кластеру дополнительного узла, а также для подключения
к кластеру конечного клиента (например, программ на C#) необходимо
указать адрес кластера. Это можно делать через IP-адрес,
но это не рекомендуется. Лучше казывать некоторое DNS-имя
и подключать либо отдельную DNS-службу на данную подсеть, либо править 
на каждом узле файл "/etc/hosts" (стандартный путь для UNIX-like
систем). Править файл hosts, очевидно, менее удобно, чем админить 
отдельную DNS-службу. Для того, чтобы ip-адреса не менялись 
постоянно (как в Интернете), следует объединить машины с узлами
кластера в VPN (либо размещать их в пределах одной физической
локальной сети).

Управление.
Управлять очередью сообщений и смотреть её состояние можно через командную 
строку rabbitmqctl. Альтернативный способ - через веб интерфейс. Его необходимо
включить на узле через команду "rabbitmq-plugins enable rabbitmq_management",
после чего можно подключить к узлу через браузер по адресу 
"http://{node-hostname}:{management_port}". По умолчанию management_port
15672. В случае с контейнером необходимо пробросить этот порт из контейнера 
наружу, в случае с виртуальной машиной - дополнительно убедиться,
что этот порт открыт для доступа извне.
