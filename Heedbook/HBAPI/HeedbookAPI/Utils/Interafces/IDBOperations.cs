using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using HBData;
using UserOperations.Models.AnalyticModels;
using HBData.Models;
using UserOperations.Controllers;
using System.Reflection;
using UserOperations.Models.Get;
using UserOperations.Models.Get.HomeController;
using UserOperations.Models.Get.AnalyticRatingController;
using UserOperations.Models.Get.AnalyticServiceQualityController;

namespace UserOperations.Utils
{
    public interface IDBOperations
    {
        double? AlertIndex(IGrouping<string, RatingDialogueInfo> dialogues);
        double? AlertIndex(IGrouping<Guid, DialogueInfoFull> dialogues);
        string BestEmployee(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions, DateTime beg, DateTime end);
        string BestEmployee(List<DialogueInfoFull> dialogues);
        double? BestEmployeeEfficiency(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions, DateTime beg, DateTime end);
        Employee BestEmployeeLoad(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions, DateTime beg, DateTime end);
        double? BestEmployeeSatisfaction(List<DialogueInfoFull> dialogues);
        string BestProgressiveEmployee(List<DialogueInfoFull> dialogues, DateTime beg);
        double? BestProgressiveEmployeeDelta(List<DialogueInfoFull> dialogues, DateTime beg);
        List<BestEmployee> BestThreeEmployees(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions, DateTime beg, DateTime end);
        double CalcWorkingDayDurationMin(DateTime? beg, DateTime? end);
        bool CheckIfDialogueInWorkingTime(Dialogue dialogue, WorkingTime[] times);
        double? CrossIndex(List<DialogueInfoFull> dialogues);
        double? CrossIndex(IGrouping<Guid?, DialogueInfoFull> dialogues);
        double? CrossIndex(IGrouping<Guid?, DialogueInfo> dialogues);
        double? CrossIndex(IGrouping<string, RatingDialogueInfo> dialogues);
        double? DialogueAverageDuration(List<DialogueInfoFull> dialogues, DateTime beg = default, DateTime end = default);
        double? DialogueAverageDuration(IGrouping<Guid, DialogueInfoFull> dialogues, DateTime beg = default, DateTime end = default);
        double? DialogueAverageDuration(IGrouping<Guid, DialogueInfoCompany> dialogues, DateTime beg, DateTime end);
        double? DialogueAverageDuration(IGrouping<DateTime, DialogueInfoFull> dialogues, DateTime beg = default, DateTime end = default);
        double? DialogueAverageDurationDaily(IGrouping<Guid, DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? DialogueAveragePause(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? DialogueAveragePause(List<SessionInfo> sessions, IGrouping<Guid, DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? DialogueAveragePause(List<SessionInfo> sessions, IGrouping<Guid, DialogueInfoCompany> dialogues, DateTime beg, DateTime end);
        List<double> DialogueAvgPauseListInMinutes(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        int DialoguesCount(List<DialogueInfoFull> dialogues, Guid? applicationUserId = null, DateTime? date = null);
        double? DialoguesPerUser(List<DialogueInfoFull> dialogues);
        double? DialogueSumDuration(IGrouping<DateTime, DialogueInfoFull> dialogues, DateTime beg = default, DateTime end = default);
        double? DialogueSumDuration(List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? DialogueSumDuration(IGrouping<DateTime, SessionInfo> sessions, List<DialogueInfoFull> dialogues, Guid applicationUserId);
        double? EfficiencyIndex(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? EfficiencyIndex(List<SessionInfo> sessions, IGrouping<Guid?, DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        int EmployeeCount(List<DialogueInfoFull> dialogues);
        int EmployeeCount(List<EfficiencyOptimizationHourInfo> info, double maxLoad, double maxPercent, double quantile = 0.95);
        List<EfficiencyLoadEmployeeTimeInfo> EmployeeTimeCalculation(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions);
        bool IsIntersect(DateTime beg1, DateTime end1, DateTime beg2, DateTime end2);
        List<EfficiencyOptimizationHourInfo> LoadDaily(DateTime beg, List<DialogueInfoFull> dialogues, List<SessionInfo> sessions);
        double? LoadIndex(double? workinHours, double? dialogueHours);
        double? LoadIndex(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? LoadIndex(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues);
        double? LoadIndex(List<SessionInfo> sessions, IGrouping<Guid?, DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? LoadIndex(List<SessionInfo> sessions, IGrouping<Guid, DialogueInfoCompany> dialogues, DateTime beg, DateTime end);
        double? LoadIndex(List<SessionInfo> sessions, IGrouping<DateTime, DialogueInfoFull> dialogues, Guid applicationUserId, DateTime? date, DateTime beg = default, DateTime end = default);
        double? LoadIndex(IGrouping<Guid, SessionInfo> sessions, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? LoadIndex(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, Guid applicationUserId, DateTime date, DateTime beg = default, DateTime end = default);
        double? LoadInterval(List<DialogueInfoFull> dialogues, List<SessionInfo> sessions, TimeSpan beg, TimeSpan end);
        double LoadPeriod(DateTime beg, DateTime end, List<DialogueInfoFull> dialogues, List<SessionInfo> sessions);
        double? LoyaltyIndex(IGrouping<string, RatingDialogueInfo> dialogues);
        double? LoyaltyIndex(List<ComponentsDialogueInfo> dialogues);
        T Max<T>(T val1, T val2) where T : IComparable<T>;
        double? MaxDouble(double? x, double? y);
        T Min<T>(T val1, T val2) where T : IComparable<T>;
        double? NecessaryIndex(IGrouping<string, RatingDialogueInfo> dialogues);
        double? PeriodIntersection(DateTime beg, DateTime end, TimeSpan timeBeg, TimeSpan timeEnd);
        EfficiencyLoadDialogueTimeSatisfactionInfo PeriodSatisfaction(DialogueInfoFull dialogue, TimeSpan timeBeg, TimeSpan timeEnd);
        double? SatisfactionDialogueDelta(List<DialogueInfoFull> dialogues);
        double? SatisfactionIndex(List<DialogueInfoFull> dialogues);
        double? SatisfactionIndex(IGrouping<Guid?, DialogueInfoFull> dialogues);
        double? SatisfactionIndex(IGrouping<Guid?, DialogueInfoCompany> dialogues);
        double? SatisfactionInterval(List<DialogueInfoFull> dialogues, TimeSpan beg, TimeSpan end);
        double? SessionAverageHours(List<SessionInfo> sessions, DateTime beg = default, DateTime end = default);
        double? SessionAverageHours(IGrouping<DateTime, SessionInfo> sessions);
        double? SessionAverageHours(List<SessionInfo> sessions, Guid applicationUserId, DateTime? date, DateTime beg = default, DateTime end = default);
        double? SessionTotalHours(List<SessionInfo> sessions, DateTime beg, DateTime end);
        double? SignedPower(double x, double power);
        List<ReportFullDayInfo> Sum(List<ReportFullDayInfo> curRes, ReportFullDayInfo newInterval);
        bool TimeInPeriod(DateTime beg, DateTime end, TimeSpan time);
        List<ReportFullDayInfo> TimeTable(List<SessionInfo> sessions, List<DialogueInfoFull> dialogues, Guid applicationUserId, DateTime date);
        int? WorkingDaysCount(IGrouping<Guid, DialogueInfoFull> dialogues);
        List<double> WorkingTimeDoubleList(WorkingTime[] timeTable, DateTime beg, DateTime end, List<Guid> companyIds, List<Device> devices, string role);
        List<CompanyTimeTable> WorkingTimeDoubleListForOneUserInCompanys(WorkingTime[] timeTable, DateTime beg, DateTime end, List<Guid> companyIds, List<Device> devices, string role);
        List<double> WorkingTimeDoubleListInMinForOneCompany(WorkingTime[] timeTable, DateTime beg, DateTime end, Guid companyId, int devicesAmount);
        double? WorklLoadByTimeIndex(List<double> timeTableForDevices, List<DialogueInfo> dialogues, DateTime beg, DateTime end);
        double? WorklLoadByTimeIndex(double timeTableForDevices, List<DialogueInfo> dialogues, DateTime beg, DateTime end);
        double? WorklLoadByTimeIndex(double timeTableForDevices, List<DialogueInfoFull> dialogues, DateTime beg, DateTime end);
        double? WorklLoadByTimeIndex(double timeTableForDevices, List<DialogueInfoFull> dialogues);
    }
}