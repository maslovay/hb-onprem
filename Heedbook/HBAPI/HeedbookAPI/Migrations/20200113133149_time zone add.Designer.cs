// <auto-generated />
using System;
using HBData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace UserOperations.Migrations
{
    [DbContext(typeof(RecordsContext))]
    [Migration("20200113133149_time zone add")]
    partial class timezoneadd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HBData.Models.Alert", b =>
                {
                    b.Property<Guid>("AlertId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AlertTypeId");

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("DeviceId");

                    b.HasKey("AlertId");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("HBData.Models.AlertType", b =>
                {
                    b.Property<Guid>("AlertTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("AlertTypeId");

                    b.ToTable("AlertTypes");
                });

            modelBuilder.Entity("HBData.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRole");
                });

            modelBuilder.Entity("HBData.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmpoyeeId");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OneSignalId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("StatusId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("StatusId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HBData.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("HBData.Models.Benchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BenchmarkNameId");

                    b.Property<DateTime>("Day");

                    b.Property<Guid?>("IndustryId");

                    b.Property<double>("Value");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BenchmarkNameId");

                    b.HasIndex("IndustryId");

                    b.ToTable("Benchmarks");
                });

            modelBuilder.Entity("HBData.Models.BenchmarkName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BenchmarkNames");
                });

            modelBuilder.Entity("HBData.Models.Campaign", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BegAge");

                    b.Property<DateTime?>("BegDate");

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int?>("EndAge");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("GenderId");

                    b.Property<bool>("IsSplash");

                    b.Property<string>("Name");

                    b.Property<int?>("StatusId");

                    b.HasKey("CampaignId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("HBData.Models.CampaignContent", b =>
                {
                    b.Property<Guid>("CampaignContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CampaignId");

                    b.Property<Guid?>("ContentId");

                    b.Property<int>("SequenceNumber");

                    b.Property<int?>("StatusId");

                    b.HasKey("CampaignContentId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContentId");

                    b.HasIndex("StatusId");

                    b.ToTable("CampaignContents");
                });

            modelBuilder.Entity("HBData.Models.CampaignContentAnswer", b =>
                {
                    b.Property<Guid>("CampaignContentAnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid>("CampaignContentId");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTime>("Time");

                    b.HasKey("CampaignContentAnswerId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CampaignContentId");

                    b.HasIndex("DeviceId");

                    b.ToTable("CampaignContentAnswers");
                });

            modelBuilder.Entity("HBData.Models.CatalogueHint", b =>
                {
                    b.Property<Guid>("CatalogueHintId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HintCondition");

                    b.Property<string>("HintText");

                    b.HasKey("CatalogueHintId");

                    b.ToTable("CatalogueHints");
                });

            modelBuilder.Entity("HBData.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Avatar");

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid?>("CorporationId");

                    b.Property<string>("Email");

                    b.Property<double[]>("FaceDescriptor");

                    b.Property<string>("Gender");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int?>("StatusId");

                    b.HasKey("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("StatusId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("HBData.Models.ClientNote", b =>
                {
                    b.Property<Guid>("ClientNoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<Guid>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string[]>("Tags");

                    b.Property<string>("Text");

                    b.HasKey("ClientNoteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientNotes");
                });

            modelBuilder.Entity("HBData.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyIndustryId");

                    b.Property<string>("CompanyName")
                        .IsRequired();

                    b.Property<Guid?>("CorporationId");

                    b.Property<Guid?>("CountryId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("LanguageId");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TimeZoneName");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyIndustryId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("HBData.Models.CompanyIndustry", b =>
                {
                    b.Property<Guid>("CompanyIndustryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyIndustryName");

                    b.Property<double?>("CrossSalesIndex");

                    b.Property<double?>("LoadIndex");

                    b.Property<double?>("SatisfactionIndex");

                    b.HasKey("CompanyIndustryId");

                    b.ToTable("CompanyIndustrys");
                });

            modelBuilder.Entity("HBData.Models.Content", b =>
                {
                    b.Property<Guid>("ContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsTemplate");

                    b.Property<string>("JSONData");

                    b.Property<string>("Name");

                    b.Property<string>("RawHTML")
                        .IsRequired();

                    b.Property<int?>("StatusId");

                    b.Property<DateTime?>("UpdateDate");

                    b.HasKey("ContentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("HBData.Models.Corporation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("HBData.Models.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName");

                    b.HasKey("CountryId");

                    b.ToTable("Countrys");
                });

            modelBuilder.Entity("HBData.Models.Device", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid?>("DeviceTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("StatusId");

                    b.HasKey("DeviceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("HBData.Models.DeviceType", b =>
                {
                    b.Property<Guid>("DeviceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("DeviceTypeId");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("HBData.Models.Dialogue", b =>
                {
                    b.Property<Guid>("DialogueId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<Guid?>("ClientId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("InStatistic");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("PersonFaceDescriptor");

                    b.Property<Guid?>("PersonId");

                    b.Property<int?>("StatusId");

                    b.Property<string>("SysVersion");

                    b.HasKey("DialogueId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StatusId");

                    b.ToTable("Dialogues");
                });

            modelBuilder.Entity("HBData.Models.DialogueAudio", b =>
                {
                    b.Property<Guid>("DialogueAudioId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<bool>("IsClient");

                    b.Property<double?>("NegativeTone");

                    b.Property<double?>("NeutralityTone");

                    b.Property<double?>("PositiveTone");

                    b.HasKey("DialogueAudioId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueAudios");
                });

            modelBuilder.Entity("HBData.Models.DialogueClientProfile", b =>
                {
                    b.Property<Guid>("DialogueClientProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Age");

                    b.Property<string>("Avatar");

                    b.Property<Guid?>("DialogueId");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsClient");

                    b.HasKey("DialogueClientProfileId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueClientProfiles");
                });

            modelBuilder.Entity("HBData.Models.DialogueClientSatisfaction", b =>
                {
                    b.Property<Guid>("DialogueClientSatisfactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Age");

                    b.Property<double?>("BegMoodByEmpoyee");

                    b.Property<double?>("BegMoodByNN");

                    b.Property<double?>("BegMoodByTeacher");

                    b.Property<double?>("BegMoodTotal");

                    b.Property<Guid?>("DialogueId");

                    b.Property<double?>("EndMoodByEmpoyee");

                    b.Property<double?>("EndMoodByNN");

                    b.Property<double?>("EndMoodByTeacher");

                    b.Property<double?>("EndMoodTotal");

                    b.Property<string>("Gender");

                    b.Property<double?>("MeetingExpectationsByClient");

                    b.Property<double?>("MeetingExpectationsByEmpoyee");

                    b.Property<double?>("MeetingExpectationsByNN");

                    b.Property<double?>("MeetingExpectationsByTeacher");

                    b.Property<double?>("MeetingExpectationsTotal");

                    b.HasKey("DialogueClientSatisfactionId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueClientSatisfactions");
                });

            modelBuilder.Entity("HBData.Models.DialogueFrame", b =>
                {
                    b.Property<Guid>("DialogueFrameId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AngerShare");

                    b.Property<double?>("ContemptShare");

                    b.Property<Guid?>("DialogueId");

                    b.Property<double?>("DisgustShare");

                    b.Property<double?>("FearShare");

                    b.Property<double?>("HappinessShare");

                    b.Property<bool>("IsClient");

                    b.Property<double?>("NeutralShare");

                    b.Property<double?>("SadnessShare");

                    b.Property<double?>("SurpriseShare");

                    b.Property<DateTime>("Time");

                    b.Property<double?>("YawShare");

                    b.HasKey("DialogueFrameId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueFrames");
                });

            modelBuilder.Entity("HBData.Models.DialogueHint", b =>
                {
                    b.Property<Guid>("DialogueHintId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<string>("HintText");

                    b.Property<bool>("IsAutomatic");

                    b.Property<bool>("IsPositive");

                    b.Property<string>("Type");

                    b.HasKey("DialogueHintId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueHints");
                });

            modelBuilder.Entity("HBData.Models.DialogueInterval", b =>
                {
                    b.Property<Guid>("DialogueIntervalId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AngerTone");

                    b.Property<DateTime>("BegTime");

                    b.Property<Guid?>("DialogueId");

                    b.Property<DateTime>("EndTime");

                    b.Property<double?>("FearTone");

                    b.Property<double?>("HappinessTone");

                    b.Property<bool>("IsClient");

                    b.Property<double?>("NeutralityTone");

                    b.Property<double?>("SadnessTone");

                    b.HasKey("DialogueIntervalId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueIntervals");
                });

            modelBuilder.Entity("HBData.Models.DialogueMarkup", b =>
                {
                    b.Property<Guid>("DialogueMarkUpId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<DateTime>("BegTimeMarkup");

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("EndTimeMarkup");

                    b.Property<bool>("IsDialogue");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TeacherId");

                    b.HasKey("DialogueMarkUpId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("DialogueMarkups");
                });

            modelBuilder.Entity("HBData.Models.DialoguePhrase", b =>
                {
                    b.Property<Guid>("DialoguePhraseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<bool>("IsClient");

                    b.Property<Guid?>("PhraseId");

                    b.Property<Guid?>("PhraseTypeId");

                    b.HasKey("DialoguePhraseId");

                    b.HasIndex("DialogueId");

                    b.HasIndex("PhraseId");

                    b.HasIndex("PhraseTypeId");

                    b.ToTable("DialoguePhrases");
                });

            modelBuilder.Entity("HBData.Models.DialoguePhraseCount", b =>
                {
                    b.Property<Guid>("DialoguePhraseCountId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<bool>("IsClient");

                    b.Property<int>("PhraseCount");

                    b.Property<Guid?>("PhraseTypeId");

                    b.HasKey("DialoguePhraseCountId");

                    b.HasIndex("DialogueId");

                    b.HasIndex("PhraseTypeId");

                    b.ToTable("DialoguePhraseCounts");
                });

            modelBuilder.Entity("HBData.Models.DialogueSpeech", b =>
                {
                    b.Property<Guid>("DialogueSpeechId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<bool>("IsClient");

                    b.Property<double?>("PositiveShare");

                    b.Property<double?>("SilenceShare");

                    b.Property<double?>("SpeechSpeed");

                    b.HasKey("DialogueSpeechId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueSpeechs");
                });

            modelBuilder.Entity("HBData.Models.DialogueVisual", b =>
                {
                    b.Property<Guid>("DialogueVisualId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AngerShare");

                    b.Property<double?>("AttentionShare");

                    b.Property<double?>("ContemptShare");

                    b.Property<Guid?>("DialogueId");

                    b.Property<double?>("DisgustShare");

                    b.Property<double?>("FearShare");

                    b.Property<double?>("HappinessShare");

                    b.Property<double?>("NeutralShare");

                    b.Property<double?>("SadnessShare");

                    b.Property<double?>("SurpriseShare");

                    b.HasKey("DialogueVisualId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueVisuals");
                });

            modelBuilder.Entity("HBData.Models.DialogueWord", b =>
                {
                    b.Property<Guid>("DialogueWordId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DialogueId");

                    b.Property<bool>("IsClient");

                    b.Property<string>("Words");

                    b.HasKey("DialogueWordId");

                    b.HasIndex("DialogueId");

                    b.ToTable("DialogueWords");
                });

            modelBuilder.Entity("HBData.Models.FileAudioDialogue", b =>
                {
                    b.Property<Guid>("FileAudioDialogueId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BegTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid>("DialogueId");

                    b.Property<double?>("Duration");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("FileContainer");

                    b.Property<bool>("FileExist");

                    b.Property<string>("FileName");

                    b.Property<string>("STTResult");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TransactionId");

                    b.HasKey("FileAudioDialogueId");

                    b.HasIndex("DialogueId");

                    b.HasIndex("StatusId");

                    b.ToTable("FileAudioDialogues");
                });

            modelBuilder.Entity("HBData.Models.FileAudioEmployee", b =>
                {
                    b.Property<Guid>("FileAudioEmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<double?>("Duration");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("FileContainer");

                    b.Property<bool>("FileExist");

                    b.Property<string>("FileName");

                    b.Property<int?>("StatusId");

                    b.HasKey("FileAudioEmployeeId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("FileAudioEmployees");
                });

            modelBuilder.Entity("HBData.Models.FileFrame", b =>
                {
                    b.Property<Guid>("FileFrameId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<Guid?>("FaceId");

                    b.Property<int?>("FaceLength");

                    b.Property<string>("FileContainer");

                    b.Property<bool>("FileExist");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsFacePresent");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("StatusNNId");

                    b.Property<DateTime>("Time");

                    b.HasKey("FileFrameId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusNNId");

                    b.ToTable("FileFrames");
                });

            modelBuilder.Entity("HBData.Models.FileVideo", b =>
                {
                    b.Property<Guid>("FileVideoId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<DateTime>("CreationTime");

                    b.Property<double?>("Duration");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("FileContainer");

                    b.Property<bool>("FileExist");

                    b.Property<string>("FileName");

                    b.Property<int?>("StatusId");

                    b.HasKey("FileVideoId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("StatusId");

                    b.ToTable("FileVideos");
                });

            modelBuilder.Entity("HBData.Models.FrameAttribute", b =>
                {
                    b.Property<Guid>("FrameAttributeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Age");

                    b.Property<string>("Descriptor");

                    b.Property<Guid>("FileFrameId");

                    b.Property<string>("Gender");

                    b.Property<string>("Value");

                    b.HasKey("FrameAttributeId");

                    b.HasIndex("FileFrameId");

                    b.ToTable("FrameAttributes");
                });

            modelBuilder.Entity("HBData.Models.FrameEmotion", b =>
                {
                    b.Property<Guid>("FrameEmotionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AngerShare");

                    b.Property<double?>("ContemptShare");

                    b.Property<double?>("DisgustShare");

                    b.Property<double?>("FearShare");

                    b.Property<Guid>("FileFrameId");

                    b.Property<double?>("HappinessShare");

                    b.Property<double?>("NeutralShare");

                    b.Property<double?>("SadnessShare");

                    b.Property<double?>("SurpriseShare");

                    b.Property<double?>("YawShare");

                    b.HasKey("FrameEmotionId");

                    b.HasIndex("FileFrameId");

                    b.ToTable("FrameEmotions");
                });

            modelBuilder.Entity("HBData.Models.GoogleAccount", b =>
                {
                    b.Property<Guid>("GoogleAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime>("ExpirationTime");

                    b.Property<string>("GoogleKey");

                    b.Property<int?>("StatusId");

                    b.HasKey("GoogleAccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("GoogleAccounts");
                });

            modelBuilder.Entity("HBData.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageLocalName");

                    b.Property<string>("LanguageName");

                    b.Property<string>("LanguageShortName");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HBData.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<double>("PaymentAmount");

                    b.Property<string>("PaymentComment");

                    b.Property<double>("PaymentTime");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TransactionId");

                    b.HasKey("PaymentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("HBData.Models.Phrase", b =>
                {
                    b.Property<Guid>("PhraseId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Accurancy");

                    b.Property<bool>("IsClient");

                    b.Property<bool>("IsTemplate");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("PhraseText");

                    b.Property<Guid?>("PhraseTypeId");

                    b.Property<int?>("WordsSpace");

                    b.HasKey("PhraseId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PhraseTypeId");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("HBData.Models.PhraseCompany", b =>
                {
                    b.Property<Guid>("PhraseCompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("PhraseId");

                    b.HasKey("PhraseCompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PhraseId");

                    b.ToTable("PhraseCompanys");
                });

            modelBuilder.Entity("HBData.Models.PhraseType", b =>
                {
                    b.Property<Guid>("PhraseTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Colour");

                    b.Property<string>("ColourSyn");

                    b.Property<string>("PhraseTypeText");

                    b.HasKey("PhraseTypeId");

                    b.ToTable("PhraseTypes");
                });

            modelBuilder.Entity("HBData.Models.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsDesktop");

                    b.Property<int?>("StatusId");

                    b.HasKey("SessionId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("HBData.Models.SlideShowSession", b =>
                {
                    b.Property<Guid>("SlideShowSessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationUserId");

                    b.Property<DateTime>("BegTime");

                    b.Property<Guid?>("CampaignContentId");

                    b.Property<string>("ContentType");

                    b.Property<Guid>("DeviceId");

                    b.Property<DateTime>("EndTime");

                    b.Property<bool>("IsPoll");

                    b.Property<string>("Url");

                    b.HasKey("SlideShowSessionId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CampaignContentId");

                    b.HasIndex("DeviceId");

                    b.ToTable("SlideShowSessions");
                });

            modelBuilder.Entity("HBData.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusName")
                        .IsRequired();

                    b.HasKey("StatusId");

                    b.ToTable("Statuss");
                });

            modelBuilder.Entity("HBData.Models.TabletAppInfo", b =>
                {
                    b.Property<string>("TabletAppVersion")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("TabletAppVersion");

                    b.ToTable("TabletAppInfos");
                });

            modelBuilder.Entity("HBData.Models.Tariff", b =>
                {
                    b.Property<Guid>("TariffId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("CustomerKey");

                    b.Property<int>("EmployeeNo");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Rebillid");

                    b.Property<int?>("StatusId");

                    b.Property<string>("TariffComment");

                    b.Property<byte[]>("Token");

                    b.Property<decimal>("TotalRate");

                    b.Property<bool>("isMonthly");

                    b.HasKey("TariffId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("HBData.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("OrderId");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentId");

                    b.Property<int?>("StatusId");

                    b.Property<Guid?>("TariffId");

                    b.Property<string>("TransactionComment");

                    b.HasKey("TransactionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TariffId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HBData.Models.VSessionUserWeeklyReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AspNetUserId");

                    b.Property<Guid>("CompanyId");

                    b.Property<Guid>("CompanyIndustryId");

                    b.Property<DateTime>("Day");

                    b.Property<int>("SessionsAmount");

                    b.Property<double>("SessionsHours");

                    b.HasKey("Id");

                    b.ToTable("VSessionUserWeeklyReports");
                });

            modelBuilder.Entity("HBData.Models.VWeeklyUserReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlertDialogues");

                    b.Property<Guid>("AspNetUserId");

                    b.Property<int?>("CrossDialogues");

                    b.Property<DateTime>("Day");

                    b.Property<double?>("DialogueHours");

                    b.Property<int>("Dialogues");

                    b.Property<int?>("FillersDialogues");

                    b.Property<int?>("LoyaltyDialogues");

                    b.Property<int?>("NecessaryDialogues");

                    b.Property<double?>("PositiveEmotions");

                    b.Property<double?>("PositiveTone");

                    b.Property<int?>("RiskDialogues");

                    b.Property<double?>("Satisfaction");

                    b.Property<double?>("SpeekEmotions");

                    b.HasKey("Id");

                    b.ToTable("VWeeklyUserReports");
                });

            modelBuilder.Entity("HBData.Models.VideoFace", b =>
                {
                    b.Property<Guid>("VideoFaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FaceId");

                    b.Property<Guid>("FileVideoId");

                    b.HasKey("VideoFaceId");

                    b.HasIndex("FileVideoId");

                    b.ToTable("VideoFaces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("ProviderKey");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HBData.Models.Alert", b =>
                {
                    b.HasOne("HBData.Models.AlertType", "AlertType")
                        .WithMany()
                        .HasForeignKey("AlertTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.ApplicationUser", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("HBData.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.Benchmark", b =>
                {
                    b.HasOne("HBData.Models.BenchmarkName", "BenchmarkName")
                        .WithMany()
                        .HasForeignKey("BenchmarkNameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.CompanyIndustry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");
                });

            modelBuilder.Entity("HBData.Models.Campaign", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.CampaignContent", b =>
                {
                    b.HasOne("HBData.Models.Campaign", "Campaign")
                        .WithMany("CampaignContents")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Content", "Content")
                        .WithMany("CampaignContents")
                        .HasForeignKey("ContentId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.CampaignContentAnswer", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.CampaignContent", "CampaignContent")
                        .WithMany()
                        .HasForeignKey("CampaignContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Device", "Device")
                        .WithMany("CampaignContentAnswers")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.Client", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.ClientNote", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.Client", "Client")
                        .WithMany("ClientNotes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.Company", b =>
                {
                    b.HasOne("HBData.Models.CompanyIndustry", "CompanyIndustry")
                        .WithMany("Company")
                        .HasForeignKey("CompanyIndustryId");

                    b.HasOne("HBData.Models.Corporation", "Corporation")
                        .WithMany("Companies")
                        .HasForeignKey("CorporationId");

                    b.HasOne("HBData.Models.Country", "Country")
                        .WithMany("Company")
                        .HasForeignKey("CountryId");

                    b.HasOne("HBData.Models.Language", "Language")
                        .WithMany("Company")
                        .HasForeignKey("LanguageId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.Content", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.Device", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany("Devices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.Dialogue", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Dialogue")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.Client", "Client")
                        .WithMany("Dialogues")
                        .HasForeignKey("ClientId");

                    b.HasOne("HBData.Models.Device", "Device")
                        .WithMany("Dialogues")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Language", "Language")
                        .WithMany("Dialogue")
                        .HasForeignKey("LanguageId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany("Dialogue")
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.DialogueAudio", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueAudio")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueClientProfile", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueClientProfile")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueClientSatisfaction", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueClientSatisfaction")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueFrame", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueFrame")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueHint", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueHint")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueInterval", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueInterval")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueMarkup", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.DialoguePhrase", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialoguePhrase")
                        .HasForeignKey("DialogueId");

                    b.HasOne("HBData.Models.Phrase", "Phrase")
                        .WithMany()
                        .HasForeignKey("PhraseId");

                    b.HasOne("HBData.Models.PhraseType", "PhraseType")
                        .WithMany()
                        .HasForeignKey("PhraseTypeId");
                });

            modelBuilder.Entity("HBData.Models.DialoguePhraseCount", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialoguePhraseCount")
                        .HasForeignKey("DialogueId");

                    b.HasOne("HBData.Models.PhraseType", "PhrType")
                        .WithMany()
                        .HasForeignKey("PhraseTypeId");
                });

            modelBuilder.Entity("HBData.Models.DialogueSpeech", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueSpeech")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueVisual", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueVisual")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.DialogueWord", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany("DialogueWord")
                        .HasForeignKey("DialogueId");
                });

            modelBuilder.Entity("HBData.Models.FileAudioDialogue", b =>
                {
                    b.HasOne("HBData.Models.Dialogue", "Dialogue")
                        .WithMany()
                        .HasForeignKey("DialogueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.FileAudioEmployee", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.FileFrame", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("HBData.Models.Status", "StatusNN")
                        .WithMany()
                        .HasForeignKey("StatusNNId");
                });

            modelBuilder.Entity("HBData.Models.FileVideo", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.FrameAttribute", b =>
                {
                    b.HasOne("HBData.Models.FileFrame", "FileFrame")
                        .WithMany("FrameAttribute")
                        .HasForeignKey("FileFrameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.FrameEmotion", b =>
                {
                    b.HasOne("HBData.Models.FileFrame", "FileFrame")
                        .WithMany("FrameEmotion")
                        .HasForeignKey("FileFrameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.GoogleAccount", b =>
                {
                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.Payment", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany("Payment")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.Phrase", b =>
                {
                    b.HasOne("HBData.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("HBData.Models.PhraseType", "PhraseType")
                        .WithMany("Phrase")
                        .HasForeignKey("PhraseTypeId");
                });

            modelBuilder.Entity("HBData.Models.PhraseCompany", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBData.Models.Phrase", "Phrase")
                        .WithMany("PhraseCompany")
                        .HasForeignKey("PhraseId");
                });

            modelBuilder.Entity("HBData.Models.Session", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Session")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.Device", "Device")
                        .WithMany("Sessions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.SlideShowSession", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("HBData.Models.CampaignContent", "CampaignContent")
                        .WithMany("SlideShowSession")
                        .HasForeignKey("CampaignContentId");

                    b.HasOne("HBData.Models.Device", "Device")
                        .WithMany("SlideShowSessions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HBData.Models.Tariff", b =>
                {
                    b.HasOne("HBData.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HBData.Models.Transaction", b =>
                {
                    b.HasOne("HBData.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("HBData.Models.Tariff", "Tariff")
                        .WithMany("Transactions")
                        .HasForeignKey("TariffId");
                });

            modelBuilder.Entity("HBData.Models.VideoFace", b =>
                {
                    b.HasOne("HBData.Models.FileVideo", "FileVideo")
                        .WithMany()
                        .HasForeignKey("FileVideoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HBData.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HBData.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
