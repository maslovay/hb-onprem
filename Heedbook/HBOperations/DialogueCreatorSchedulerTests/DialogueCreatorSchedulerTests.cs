using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Common;
using Configurations;
using DialogueCreatorScheduler.QuartzJobs;
using DialogueCreatorScheduler.Service;
using DialogueCreatorScheduler.Services;
using HBData;
using HBData.Models;
using HBData.Repository;
using HBLib;
using HBLib.Utils;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using Moq;
using Newtonsoft.Json;
using NUnit.Framework;
using Quartz;
using RabbitMqEventBus;
using RabbitMqEventBus.Events;
using UnitTestExtensions;

namespace DialogueCreatorScheduler.Tests
{
    [TestFixture]
    public class DialogueCreatorSchedulerTests : ServiceTest
    {
        private Startup _startup;
        private CompanyIndustry _industry;
        private Company _company;
        private Device _device;
        private Process _dialogueCreatorSchedulerProcess;
        private SftpClient _sftpClient;        
        private ElasticClient _elasticClient;
        private SftpSettings _sftpSetting;
        private DialogueCreatorService _dialogueCreator;
        private DialogueSavingService _publisher;
        private FaceIntervalsService _intervalCalc;
        private Guid _faceId1 = Guid.Parse("49c569a5-d0c7-4cb7-9306-9cb3a4bff36b");
        private Guid _faceId2 = Guid.Parse("49c569a5-d0c7-4cb7-9306-9cb3a4bff36c");
        private Guid _faceId3 = Guid.Parse("49c569a5-d0c7-4cb7-9306-9cb3a4bff36d");
        private DateTime _startFrameTime;
        private FileVideo _fileVideo;
        private Client _client;
        private RecordsContext _context;
        
        [SetUp]
        public async Task Setup()
        {
            await base.Setup(() =>
            {
                Services.AddRabbitMqEventBusConfigFromEnv();
                _startup = new Startup(Config);
                _startup.ConfigureServices(Services);    
                Services.AddSingleton<DialogueCreatorService>();
                Services.AddSingleton<FaceIntervalsService>();
                Services.AddSingleton<DialogueSavingService>(); 

            }, true);
            // _dialogueCreatorSchedulerJob = new DialogueCreatorSchedulerJob
            // (
            //     ScopeFactory,
            //     _elasticClient,
            //     _dialogueCreator,
            //     _publisher,
            //     _intervalCalc
            // );
            RunServices();
        }
        private void RunServices()
        {
            try
            {
                var config = "Release";

#if DEBUG
                config = "Debug";
#endif
                var dockerEnvironment = Environment.GetEnvironmentVariable("DOCKER_INTEGRATION_TEST_ENVIRONMENT")=="TRUE" ? true : false;
                System.Console.WriteLine($"dockerEnvironment: {dockerEnvironment}");
                System.Console.WriteLine($"process folder: {config}");
                if(!dockerEnvironment)
                {
                    _dialogueCreatorSchedulerProcess = Process.Start(
                        "dotnet",
                        $"../../../../DialogueCreatorScheduler/bin/{config}/netcoreapp2.2/DialogueCreatorScheduler.dll --isCalledFromUnitTest true");
                }
                else
                {
                    _dialogueCreatorSchedulerProcess = Process.Start(
                    "dotnet",
                    $"/app/HBOperations/DialogueCreatorScheduler/bin/{config}/netcoreapp2.2/DialogueCreatorScheduler.dll --isCalledFromUnitTest true");
                }
            }
            catch(Exception e)
            {
                System.Console.WriteLine(e);
            }
        }
        protected override void InitServices()
        {
        //     System.Console.WriteLine($"InitServices");
        //     //_repository = ServiceProvider.GetRequiredService<IGenericRepository>();
        //     System.Console.WriteLine($"repository is null: {_repository is null}");
            _sftpClient = ServiceProvider.GetService<SftpClient>();
            // _elasticClient= ServiceProvider.GetService<ElasticClient>();
            // _sftpSetting = ServiceProvider.GetService<SftpSettings>();
            // _dialogueCreator = ServiceProvider.GetService<DialogueCreatorService>();
            _publisher = ServiceProvider.GetService<DialogueSavingService>();
            // _intervalCalc = ServiceProvider.GetService<FaceIntervalsService>();
            _context = ScopeFactory.CreateScope().ServiceProvider.GetRequiredService<RecordsContext>();
        }

        protected override async Task PrepareTestData()
        {
            try
            {
                var testIndustryName = $"TestIndustry";
                _startFrameTime = DateTime.UtcNow.AddHours(-5);
                _industry = new CompanyIndustry()
                {
                    CompanyIndustryId = Guid.NewGuid(),
                    CompanyIndustryName = testIndustryName,
                    SatisfactionIndex = 0,
                    LoadIndex = 0.5,
                    CrossSalesIndex = 0.04
                };
                _repository.Create<CompanyIndustry>(_industry);
                var testCompanyName = $"TestCompanyName";
                _company = new Company()
                {
                    CompanyId = Guid.NewGuid(),
                    CompanyName = testCompanyName,
                    CompanyIndustryId = _industry.CompanyIndustryId,
                    CreationDate = DateTime.Now,
                    IsExtended = false
                };
                _repository.Create<Company>(_company);
                _device = new Device()
                {
                    DeviceId = Guid.NewGuid(),
                    Code = "TSTDEV",
                    Name = "TestDeviceForIntegrationTests",
                    CompanyId = _company.CompanyId,
                    DeviceTypeId = Guid.Parse("b29a6c53-fbdf-4dba-930b-95a267e4e313"),
                    StatusId = 3
                };            
                _repository.Create<Device>(_device);
                System.Console.WriteLine($"deviceId: {_device.DeviceId}");            
                for(int i = 0; i < 50; i++)
                {
                    var Frame1 = new FileFrame()
                    {
                        FileFrameId = Guid.NewGuid(),
                        DeviceId = _device.DeviceId,
                        FileExist = true,
                        Time = _startFrameTime.AddSeconds(3 * i),
                        StatusNNId = 6,
                        FileName = $"{Guid.Empty}_{_device.DeviceId}_{_startFrameTime.AddSeconds(3 * i).ToString("yyyyMMddHHmmss")}.jpg",
                        FileContainer = "frames",
                        IsFacePresent = true,
                        FaceId = _faceId1
                    };
                    var frameAttribute1 = new FrameAttribute()
                    {
                        FrameAttributeId = Guid.NewGuid(),
                        FileFrameId = Frame1.FileFrameId,
                        Gender = "Male",
                        Age = 20,
                        Value = "{\"Top\":309,\"Width\":137,\"Height\":170,\"Left\":709}",
                        Descriptor = $"[-0.44962623715400696,-0.61511456966400146,-0.14612722396850586,0.7983090877532959,1.6270284652709961,-0.31455427408218384,-0.82587963342666626,0.0015840530395507812,0.64044332504272461,-0.89610505104064941,-1.3372976779937744,0.81723946332931519,0.2418002188205719,-0.25880575180053711,0.741070032119751,-0.72313547134399414,0.50454646348953247,-0.037585347890853882,-0.39773634076118469,0.2915424108505249,0.5210498571395874,-0.75657522678375244,0.18684908747673035,-1.1302828788757324,-1.0956816673278809,0.68961769342422485,-0.086378574371337891,-0.070598721504211426,-0.34884560108184814,-0.090286523103713989,0.88897460699081421,0.4447893500328064,-0.88597822189331055,0.32945966720581055,0.016509056091308594,0.780862033367157,-0.66917681694030762,0.27675962448120117,1.4287997484207153,-0.52758115530014038,0.13456866145133972,-0.43690657615661621,-1.370867133140564,0.16370728611946106,-0.39696142077445984,0.65207850933074951,-0.56009817123413086,0.041393503546714783,-0.652790904045105,1.0415091514587402,0.933350145816803,-0.34185081720352173,-0.55455487966537476,0.6690526008605957,-0.18938949704170227,-0.082054644823074341,1.2438923120498657,-0.43882039189338684,-0.20405548810958862,-0.92328202724456787,0.30711287260055542,-0.36209535598754883,1.6927357912063599,0.63551735877990723,0.27123698592185974,0.2239094078540802,0.048714280128479004,0.59646749496459961,-1.1706740856170654,-0.21479709446430206,0.39797693490982056,-0.45408380031585693,-1.4848687648773193,0.061447456479072571,0.8486981987953186,-0.21212995052337646,-0.26407688856124878,0.16551004350185394,-1.0449566841125488,1.7355796098709106,-0.92636966705322266,-0.097459614276885986,-0.37012350559234619,0.64735370874404907,0.232021301984787,0.30317103862762451,0.13672752678394318,0.49866631627082825,-0.56965923309326172,0.42926427721977234,-0.96716147661209106,-0.39202034473419189,0.17719416320323944,0.93677908182144165,0.62649649381637573,0.59386640787124634,-0.93834608793258667,0.4807707667350769,-0.94846320152282715,0.42577067017555237,-0.64142793416976929,0.12930524349212646,0.66806352138519287,-0.40218645334243774,-0.76628577709198,-0.72495412826538086,0.66771978139877319,0.57908815145492554,-0.38447004556655884,0.28281921148300171,-0.89600569009780884,-1.3083962202072144,0.96925860643386841,-0.82208716869354248,-0.66177797317504883,-0.99651724100112915,-0.34671247005462646,1.0814461708068848,-0.36932450532913208,-1.0503139495849609,-0.47316426038742065,-0.98575276136398315,-0.90102720260620117,0.60182482004165649,1.006880521774292,0.91939443349838257,-0.37942749261856079,0.69284021854400635,-1.151688814163208,0.30068963766098022,-0.67988348007202148,-0.286417692899704,-0.84974825382232666,-1.9100472927093506,-0.54714876413345337,-0.081839576363563538,0.58376425504684448,1.5154246091842651,-0.99073445796966553,0.88446766138076782,0.75738281011581421,-0.965613842010498,-0.83895587921142578,-0.30662772059440613,0.31102654337882996,-0.84932267665863037,0.68352055549621582,-1.2435334920883179,-0.21397045254707336,0.860309898853302,-1.2222831249237061,0.33503207564353943,-0.33511483669281006,-0.38714200258255005,1.91568922996521,-1.0589002370834351,0.94949901103973389,1.3631411790847778,-0.67506200075149536,-0.29108786582946777,-0.30633068084716797,-0.44528022408485413,0.12287233024835587,-0.77709543704986572,-0.62592732906341553,-0.058701664209365845,1.0838463306427002,-0.55592858791351318,-1.985654354095459,-0.51176893711090088,-1.3928673267364502,1.1438907384872437,-0.1192222535610199,0.55354225635528564,-0.63224738836288452,1.4488880634307861,-0.36874693632125854,-0.8899080753326416,0.21035557985305786,-0.92706149816513062,-1.2088775634765625,-0.2275049090385437,-0.46789553761482239,0.74954438209533691,0.38798290491104126,1.0545274019241333,0.76152563095092773,-0.14842665195465088,-0.072959676384925842,-0.25909346342086792,0.79913210868835449,-0.056042157113552094,-0.59213221073150635,-0.58930683135986328,0.97320246696472168,-1.2590864896774292,0.94557631015777588,0.48506081104278564,-0.017931103706359863,0.7142866849899292,0.9517291784286499,0.29663717746734619,1.2166042327880859,0.019351720809936523,0.76695293188095093,1.3420464992523193,-0.37708526849746704,-0.10533140599727631,0.86221003532409668,-0.031086057424545288,-0.4096720814704895,-1.7132737636566162,0.72324877977371216,-0.4458356499671936,0.486851304769516,-0.48020941019058228,1.281645655632019,1.1885833740234375,-0.09583592414855957,0.98027586936950684,-1.6213494539260864,0.32341682910919189,-1.2628233432769775,0.30169683694839478,0.61793386936187744,-1.4848394393920898,0.626580536365509,1.1384243965148926,0.15022626519203186,-0.84981727600097656,1.174317479133606,0.30439466238021851,0.097476720809936523,-0.10917168855667114,0.83502054214477539,0.12136685848236084,-0.53970623016357422,0.10493394732475281,-0.64302605390548706,-0.45788693428039551,0.51773393154144287,-1.5552054643630981,-0.8707277774810791,0.70992201566696167,-1.4926223754882812,-0.70796060562133789,-0.5417940616607666,-0.25773090124130249,-0.014232560992240906,-0.20454928278923035,-1.0952463150024414,-1.2372488975524902,-0.3204687237739563,-0.92943143844604492,-0.54361975193023682,0.38981884717941284]"
                    };
                    _repository.Create<FileFrame>(Frame1);
                    _repository.Create<FrameAttribute>(frameAttribute1);
                }
                for(int i = 0; i < 50; i++)
                {
                    var Frame1 = new FileFrame()
                    {
                        FileFrameId = Guid.NewGuid(),
                        DeviceId = _device.DeviceId,
                        FileExist = true,
                        Time = _startFrameTime.AddSeconds(3 * i + 150),
                        StatusNNId = 6,
                        FileName = $"{Guid.Empty}_{_device.DeviceId}_{_startFrameTime.AddSeconds(3 * i + 150).ToString("yyyyMMddHHmmss")}.jpg",
                        FileContainer = "frames",
                        IsFacePresent = true,
                        FaceId = _faceId2
                    };
                    var frameAttribute1 = new FrameAttribute()
                    {
                        FrameAttributeId = Guid.NewGuid(),
                        FileFrameId = Frame1.FileFrameId,
                        Gender = "Male",
                        Age = 20,
                        Value = "{\"Top\":309,\"Width\":137,\"Height\":170,\"Left\":709}",
                        Descriptor = $"[-2.0959391593933105,0.43795990943908691,-1.6736390590667725,-0.16262742877006531,-0.34278824925422668,-0.307516872882843,-0.44359880685806274,1.064613938331604,-1.25150728225708,-0.75976383686065674,-0.35757991671562195,1.6352155208587646,1.5066981315612793,0.98759603500366211,-0.76563656330108643,1.2489914894104004,1.4826879501342773,1.4086699485778809,-0.82746410369873047,-0.36088800430297852,-0.597713053226471,0.95482087135314941,0.60715866088867188,0.64249539375305176,-0.25822675228118896,0.27920025587081909,-1.4058806896209717,-0.88751065731048584,1.3869714736938477,0.56836998462677,1.2897430658340454,0.54238027334213257,-1.170656681060791,-0.55779582262039185,0.9106147289276123,0.2985231876373291,2.2949678897857666,0.8972238302230835,-0.68773567676544189,0.53073298931121826,0.035398706793785095,-0.61453044414520264,0.96453279256820679,0.60169428586959839,-1.4536647796630859,0.13823921978473663,-0.037592977285385132,1.6418142318725586,-0.31255587935447693,-1.3024345636367798,-1.3518290519714355,-0.69100779294967651,-0.17219501733779907,0.41318845748901367,-1.6488233804702759,-0.54190731048583984,-0.40307158231735229,-0.57815998792648315,0.18663111329078674,-0.93513929843902588,-0.20953401923179626,-0.71170938014984131,0.1850351095199585,0.88860130310058594,1.5358927249908447,1.5317559242248535,0.17729613184928894,0.084294110536575317,-1.1412994861602783,0.10090388357639313,1.0420640707015991,-0.23077172040939331,1.182610034942627,-0.15671081840991974,0.50824511051177979,0.034049242734909058,-0.80914485454559326,0.51683807373046875,1.0706796646118164,-1.2384099960327148,-0.13427779078483582,1.4485347270965576,-1.6352885961532593,0.29843971133232117,-0.32535314559936523,-0.85027611255645752,-0.62078642845153809,-0.93078446388244629,-0.17550534009933472,0.841457724571228,-0.92076396942138672,0.72931110858917236,1.0968921184539795,0.10135974735021591,0.074665814638137817,2.390944242477417,0.16302193701267242,0.974261999130249,-1.2439051866531372,-1.546734094619751,-0.3606836199760437,-2.07814359664917,0.030411824584007263,-0.33550271391868591,-0.83249181509017944,0.84558665752410889,-1.3991916179656982,0.42703855037689209,2.6027131080627441,0.089847534894943237,0.043019570410251617,0.51574504375457764,-0.24788348376750946,-1.0736285448074341,1.0325376987457275,0.43269988894462585,-0.78623819351196289,0.4307994544506073,0.4360983669757843,1.7714049816131592,-0.15138930082321167,-1.1748948097229004,-1.2937556505203247,-0.48170369863510132,-0.55204778909683228,-0.020247355103492737,0.46014308929443359,-0.70004433393478394,1.6459712982177734,0.35100853443145752,1.1090682744979858,-0.28108629584312439,-0.55097711086273193,0.14901632070541382,0.28107988834381104,-1.1543245315551758,-0.43636450171470642,-0.21921195089817047,0.542283296585083,-1.717143177986145,0.14700780808925629,-0.15048021078109741,0.18569932878017426,1.4705864191055298,-0.3395894467830658,-0.14659604430198669,-0.21133069694042206,0.527028501033783,-0.48318549990653992,-0.69100111722946167,1.1181087493896484,0.12547433376312256,0.8010249137878418,-0.092713236808776855,-0.42356401681900024,1.9602857828140259,-0.19123777747154236,-1.0568385124206543,-1.4981493949890137,-0.062316108494997025,1.8289966583251953,1.2101197242736816,-2.5595777034759521,0.1562650203704834,0.11333528161048889,1.5057131052017212,0.67362332344055176,-1.8982501029968262,0.959375262260437,-1.912712574005127,0.18856798112392426,0.69459617137908936,-0.1368609219789505,-0.0036837905645370483,0.28542208671569824,-0.57914596796035767,-0.35814103484153748,-0.60368931293487549,-1.1042697429656982,1.1371842622756958,-0.040014743804931641,-0.0057339668273925781,0.7815701961517334,1.0092954635620117,-0.87037211656570435,0.035806626081466675,0.15245541930198669,-0.97076350450515747,1.052619457244873,1.3457673788070679,-1.0667247772216797,1.7325680255889893,-1.5071444511413574,-0.01991608738899231,0.0918656587600708,0.56995022296905518,-1.0040096044540405,-0.78297138214111328,0.52974206209182739,-0.27377030253410339,-0.67859983444213867,0.84213799238204956,-0.58307278156280518,-1.2228807210922241,0.31284403800964355,-0.8526039719581604,-0.852859377861023,1.1564230918884277,0.7574041485786438,0.73723369836807251,0.96165114641189575,-1.8966120481491089,-0.29474073648452759,0.37839889526367188,0.1092333197593689,-0.021520309150218964,0.055786531418561935,-0.99060994386672974,-0.45300376415252686,-0.26335442066192627,0.46598231792449951,2.4418983459472656,0.3519764244556427,-0.78871017694473267,-0.025670498609542847,0.10010302066802979,1.7518637180328369,0.94964170455932617,0.58030557632446289,0.084985822439193726,-0.42856284976005554,0.11199593544006348,1.1608908176422119,0.66435611248016357,-0.39197713136672974,-1.4913243055343628,-0.22928377985954285,-0.14754441380500793,-0.51086759567260742,-1.6018646955490112,-1.8159408569335938,-0.48223227262496948,0.67174792289733887,0.97037762403488159,-0.19560733437538147,0.27844905853271484,-0.2595956027507782,0.616930365562439,-0.51418477296829224,0.34101036190986633,-0.61240577697753906,0.99845737218856812,0.10041148215532303,1.2478548288345337,0.014641940593719482,0.21320334076881409]"
                    };
                    _repository.Create<FileFrame>(Frame1);
                    _repository.Create<FrameAttribute>(frameAttribute1);
                }
                for(int i = 0; i < 50; i++)
                {
                    var Frame1 = new FileFrame()
                    {
                        FileFrameId = Guid.NewGuid(),
                        DeviceId = _device.DeviceId,
                        FileExist = true,
                        Time = _startFrameTime.AddSeconds(3 * i + 300),
                        StatusNNId = 6,
                        FileName = $"{Guid.Empty}_{_device.DeviceId}_{_startFrameTime.AddSeconds(3 * i + 300).ToString("yyyyMMddHHmmss")}.jpg",
                        FileContainer = "frames",
                        IsFacePresent = true,
                        FaceId = _faceId3
                    };
                    var frameAttribute1 = new FrameAttribute()
                    {
                        FrameAttributeId = Guid.NewGuid(),
                        FileFrameId = Frame1.FileFrameId,
                        Gender = "Male",
                        Age = 20,
                        Value = "{\"Top\":309,\"Width\":137,\"Height\":170,\"Left\":709}",
                        Descriptor = $"[-1.9366841316223145,0.57715415954589844,-1.5010974407196045,-0.24954712390899658,-0.5141294002532959,-0.3920416533946991,-0.47824060916900635,0.90469926595687866,-1.4735347032546997,-0.63061034679412842,-0.37355893850326538,1.5611511468887329,1.5956703424453735,1.2404042482376099,-0.8018302321434021,1.1807320117950439,1.6408089399337769,1.5281314849853516,-0.835005521774292,-0.10618260502815247,-0.82752549648284912,0.77287924289703369,0.58770817518234253,0.72035902738571167,-0.35126334428787231,0.26537525653839111,-1.1960703134536743,-0.90395140647888184,1.5021198987960815,0.793578565120697,1.3016786575317383,0.44627445936203003,-0.93370151519775391,-0.73389101028442383,0.93601894378662109,0.17126971483230591,2.044710636138916,1.2181516885757446,-0.64323318004608154,0.61026978492736816,-0.059307098388671875,-0.69130599498748779,0.96009397506713867,0.337700754404068,-1.5556936264038086,0.039059147238731384,-0.070102483034133911,1.5764604806900024,-0.25699919462203979,-1.2782577276229858,-1.4779989719390869,-0.90599781274795532,-0.37920668721199036,0.59166300296783447,-1.7846758365631104,-0.49019345641136169,-0.479935884475708,-0.37125575542449951,0.17677547037601471,-0.77804297208786011,-0.15184420347213745,-0.83417898416519165,0.10317867994308472,0.83837968111038208,1.1780856847763062,1.3061246871948242,0.071547374129295349,0.017951339483261108,-1.3221685886383057,0.074065789580345154,1.0951513051986694,-0.14748063683509827,1.3545999526977539,0.043419092893600464,0.70796465873718262,0.32006722688674927,-0.76353859901428223,0.62990474700927734,0.824897289276123,-1.145179271697998,-0.15529127418994904,1.5096805095672607,-1.23270845413208,0.058021202683448792,-0.32268670201301575,-0.69433963298797607,-0.47951692342758179,-0.6992647647857666,-0.1810162365436554,0.898118257522583,-0.72645145654678345,0.80835610628128052,1.2126095294952393,0.13138031959533691,-0.51714175939559937,2.3571481704711914,-0.1765364408493042,1.3182934522628784,-1.1902117729187012,-1.4072988033294678,-0.77866226434707642,-1.8808028697967529,0.10047918558120728,-0.43623906373977661,-0.8229789137840271,1.2149749994277954,-1.5166693925857544,0.3498874306678772,2.7311675548553467,0.07536432147026062,-0.15886932611465454,0.63646548986434937,-0.0832449197769165,-1.0290771722793579,0.775200605392456,0.44153660535812378,-0.67158418893814087,0.41557455062866211,0.59468734264373779,2.0197830200195312,0.0039356350898742676,-1.1439294815063477,-1.3785555362701416,-0.64301151037216187,-0.61951369047164917,-0.30904653668403625,0.60088557004928589,-0.92732739448547363,1.5375779867172241,0.29333710670471191,0.78886550664901733,-0.11050869524478912,-0.59671187400817871,0.10811448097229004,0.067869171500206,-1.4539451599121094,-0.42615586519241333,-0.23354583978652954,0.70295768976211548,-1.5641369819641113,0.017036654055118561,-0.36508095264434814,0.24937263131141663,1.5287615060806274,-0.43902075290679932,0.094900086522102356,-0.017794758081436157,0.608043372631073,-0.32749843597412109,-0.87737476825714111,0.81273335218429565,0.20591622591018677,0.61072057485580444,-0.16006922721862793,-0.5328020453453064,1.8276370763778687,-0.071130216121673584,-0.56362533569335938,-1.5378661155700684,0.043126814067363739,1.7316234111785889,1.2049343585968018,-2.7541494369506836,0.098994791507720947,0.19116696715354919,1.5443887710571289,0.49511092901229858,-1.8097465038299561,0.67518818378448486,-1.9147639274597168,0.28692048788070679,0.45800948143005371,-0.28619691729545593,-0.022098630666732788,0.46655493974685669,-0.65752267837524414,-0.15140828490257263,-0.622596263885498,-0.73468184471130371,1.5114109516143799,-0.0032471716403961182,0.28257536888122559,0.86659824848175049,0.78748136758804321,-0.7424195408821106,0.28649777173995972,0.097224533557891846,-1.0254741907119751,1.3493245840072632,1.4067330360412598,-1.0696769952774048,1.708321213722229,-1.5100464820861816,-0.16909989714622498,-0.075139880180358887,0.30166876316070557,-0.85596150159835815,-0.93560773134231567,0.48361340165138245,-0.421873539686203,-0.648298442363739,0.82964968681335449,-0.499112606048584,-1.3666821718215942,0.28470179438591003,-0.63110560178756714,-0.71601533889770508,1.1046320199966431,0.9221879243850708,0.45919716358184814,0.81940317153930664,-1.7968021631240845,-0.11906206607818604,0.17317190766334534,0.029994092881679535,-0.15905025601387024,-0.068697273731231689,-0.72592955827713013,-0.50529563426971436,-0.19546559453010559,0.47252482175827026,2.485304594039917,-0.17350964248180389,-0.78578865528106689,0.0310937762260437,-0.14180567860603333,2.0136923789978027,0.9274788498878479,0.84648185968399048,-0.025740087032318115,-0.39752113819122314,0.13916963338851929,1.1257096529006958,0.68054044246673584,-0.3468298614025116,-1.6815259456634521,-0.34677019715309143,-0.16056004166603088,-0.69959557056427,-1.7878879308700562,-1.702517032623291,-0.86725866794586182,0.92923092842102051,0.69770777225494385,0.11604064702987671,0.086969614028930664,-0.25445070862770081,0.33371242880821228,-0.85307765007019043,0.2993604838848114,-0.68142455816268921,0.77254551649093628,0.14040522277355194,0.916832447052002,0.0081265568733215332,0.17075762152671814]"
                    };
                    _repository.Create<FileFrame>(Frame1);
                    _repository.Create<FrameAttribute>(frameAttribute1);
                }
                _fileVideo = new FileVideo()
                {
                    FileVideoId = Guid.NewGuid(),
                    DeviceId = _device.DeviceId,
                    BegTime = _startFrameTime,
                    EndTime = _startFrameTime.AddSeconds(80),
                    CreationTime = _startFrameTime.AddSeconds(80),
                    FileName = $"{Guid.Empty}_{_device.DeviceId}_{_startFrameTime.AddSeconds(80).ToString("yyyyMMddHHmmss")}_2.mkv",
                    FileContainer = "videos",
                    FileExist = true,
                    StatusId = 6,
                    Duration = 80
                };
                _repository.Create<FileVideo>(_fileVideo);
                _client = new Client()
                {
                    ClientId = Guid.NewGuid(),
                    Name = "TestClient",
                    Gender = "Male",
                    Age = 20,
                    FaceDescriptor = new double[]{-0.44962623715400696,-0.61511456966400146,-0.14612722396850586,0.7983090877532959,1.6270284652709961,-0.31455427408218384,-0.82587963342666626,0.0015840530395507812,0.64044332504272461,-0.89610505104064941,-1.3372976779937744,0.81723946332931519,0.2418002188205719,-0.25880575180053711,0.741070032119751,-0.72313547134399414,0.50454646348953247,-0.037585347890853882,-0.39773634076118469,0.2915424108505249,0.5210498571395874,-0.75657522678375244,0.18684908747673035,-1.1302828788757324,-1.0956816673278809,0.68961769342422485,-0.086378574371337891,-0.070598721504211426,-0.34884560108184814,-0.090286523103713989,0.88897460699081421,0.4447893500328064,-0.88597822189331055,0.32945966720581055,0.016509056091308594,0.780862033367157,-0.66917681694030762,0.27675962448120117,1.4287997484207153,-0.52758115530014038,0.13456866145133972,-0.43690657615661621,-1.370867133140564,0.16370728611946106,-0.39696142077445984,0.65207850933074951,-0.56009817123413086,0.041393503546714783,-0.652790904045105,1.0415091514587402,0.933350145816803,-0.34185081720352173,-0.55455487966537476,0.6690526008605957,-0.18938949704170227,-0.082054644823074341,1.2438923120498657,-0.43882039189338684,-0.20405548810958862,-0.92328202724456787,0.30711287260055542,-0.36209535598754883,1.6927357912063599,0.63551735877990723,0.27123698592185974,0.2239094078540802,0.048714280128479004,0.59646749496459961,-1.1706740856170654,-0.21479709446430206,0.39797693490982056,-0.45408380031585693,-1.4848687648773193,0.061447456479072571,0.8486981987953186,-0.21212995052337646,-0.26407688856124878,0.16551004350185394,-1.0449566841125488,1.7355796098709106,-0.92636966705322266,-0.097459614276885986,-0.37012350559234619,0.64735370874404907,0.232021301984787,0.30317103862762451,0.13672752678394318,0.49866631627082825,-0.56965923309326172,0.42926427721977234,-0.96716147661209106,-0.39202034473419189,0.17719416320323944,0.93677908182144165,0.62649649381637573,0.59386640787124634,-0.93834608793258667,0.4807707667350769,-0.94846320152282715,0.42577067017555237,-0.64142793416976929,0.12930524349212646,0.66806352138519287,-0.40218645334243774,-0.76628577709198,-0.72495412826538086,0.66771978139877319,0.57908815145492554,-0.38447004556655884,0.28281921148300171,-0.89600569009780884,-1.3083962202072144,0.96925860643386841,-0.82208716869354248,-0.66177797317504883,-0.99651724100112915,-0.34671247005462646,1.0814461708068848,-0.36932450532913208,-1.0503139495849609,-0.47316426038742065,-0.98575276136398315,-0.90102720260620117,0.60182482004165649,1.006880521774292,0.91939443349838257,-0.37942749261856079,0.69284021854400635,-1.151688814163208,0.30068963766098022,-0.67988348007202148,-0.286417692899704,-0.84974825382232666,-1.9100472927093506,-0.54714876413345337,-0.081839576363563538,0.58376425504684448,1.5154246091842651,-0.99073445796966553,0.88446766138076782,0.75738281011581421,-0.965613842010498,-0.83895587921142578,-0.30662772059440613,0.31102654337882996,-0.84932267665863037,0.68352055549621582,-1.2435334920883179,-0.21397045254707336,0.860309898853302,-1.2222831249237061,0.33503207564353943,-0.33511483669281006,-0.38714200258255005,1.91568922996521,-1.0589002370834351,0.94949901103973389,1.3631411790847778,-0.67506200075149536,-0.29108786582946777,-0.30633068084716797,-0.44528022408485413,0.12287233024835587,-0.77709543704986572,-0.62592732906341553,-0.058701664209365845,1.0838463306427002,-0.55592858791351318,-1.985654354095459,-0.51176893711090088,-1.3928673267364502,1.1438907384872437,-0.1192222535610199,0.55354225635528564,-0.63224738836288452,1.4488880634307861,-0.36874693632125854,-0.8899080753326416,0.21035557985305786,-0.92706149816513062,-1.2088775634765625,-0.2275049090385437,-0.46789553761482239,0.74954438209533691,0.38798290491104126,1.0545274019241333,0.76152563095092773,-0.14842665195465088,-0.072959676384925842,-0.25909346342086792,0.79913210868835449,-0.056042157113552094,-0.59213221073150635,-0.58930683135986328,0.97320246696472168,-1.2590864896774292,0.94557631015777588,0.48506081104278564,-0.017931103706359863,0.7142866849899292,0.9517291784286499,0.29663717746734619,1.2166042327880859,0.019351720809936523,0.76695293188095093,1.3420464992523193,-0.37708526849746704,-0.10533140599727631,0.86221003532409668,-0.031086057424545288,-0.4096720814704895,-1.7132737636566162,0.72324877977371216,-0.4458356499671936,0.486851304769516,-0.48020941019058228,1.281645655632019,1.1885833740234375,-0.09583592414855957,0.98027586936950684,-1.6213494539260864,0.32341682910919189,-1.2628233432769775,0.30169683694839478,0.61793386936187744,-1.4848394393920898,0.626580536365509,1.1384243965148926,0.15022626519203186,-0.84981727600097656,1.174317479133606,0.30439466238021851,0.097476720809936523,-0.10917168855667114,0.83502054214477539,0.12136685848236084,-0.53970623016357422,0.10493394732475281,-0.64302605390548706,-0.45788693428039551,0.51773393154144287,-1.5552054643630981,-0.8707277774810791,0.70992201566696167,-1.4926223754882812,-0.70796060562133789,-0.5417940616607666,-0.25773090124130249,-0.014232560992240906,-0.20454928278923035,-1.0952463150024414,-1.2372488975524902,-0.3204687237739563,-0.92943143844604492,-0.54361975193023682,0.38981884717941284},
                    StatusId = 3,
                    CompanyId = _company.CompanyId,
                    LastDate = DateTime.Now.AddHours(-1)
                };
                _repository.Create<Client>(_client);
                await _repository.SaveAsync();
            }
            catch(Exception e)
            {
                System.Console.WriteLine(e);
            }
            

            var currentDir = $"../../../../Common";
            var testVideoPath = Directory
                .GetFiles(Path.Combine(currentDir, "Resources/Videos"), "testid_20190426094725_2.mkv")
                .FirstOrDefault();

            if (testVideoPath == null)
                throw new Exception("Can't get a test DialogueVideo for preparing a testset!");

            var testVideoCorrectFileName = _fileVideo.FileName;
            var tasks = new List<Task>();
            if (!(await _sftpClient.IsFileExistsAsync("videos/" + testVideoCorrectFileName)))
            {
                System.Console.WriteLine($"upload: {testVideoCorrectFileName}");
                await _sftpClient.UploadAsync(testVideoPath, "videos/", testVideoCorrectFileName);
            }
                
            _sftpClient.ChangeDirectoryToDefault();
        }
        
        [Test]
        public async Task CheckSoundFilePresents()
        {
            //Arrange
            IJobExecutionContext mockJobExecutionContext= new Mock<IJobExecutionContext>().Object;

            //Act
            // await _dialogueCreatorSchedulerJob.Execute(mockJobExecutionContext);
            Thread.Sleep(300000);         
            var dialogue = _context.Dialogues.Where(p => p.DeviceId == _device.DeviceId)
                .ToList();
                // && p.BegTime >= _startFrameTime.AddMinutes(-1));            
            System.Console.WriteLine($"Test: dialogue:\n{JsonConvert.SerializeObject(dialogue)}");
            //Assert
            Assert.IsTrue(dialogue.Any());      
        }
        [TearDown]
        public async new Task TearDown()
        {
            await base.TearDown();   
            _dialogueCreatorSchedulerProcess.Kill();         
        }
        protected override async Task CleanTestData()
        {   
            try
            {
                _repository.Delete<Client>(_client);
                _repository.Delete<CompanyIndustry>(_industry);
                _repository.Delete<Company>(_company);
                _repository.Delete<Device>(_device);
                _repository.Delete<Dialogue>(p => p.DeviceId == _device.DeviceId);
                _repository.Save();
            }
            catch(Exception e)
            {
                System.Console.WriteLine(e);
            }
        }
    }
}