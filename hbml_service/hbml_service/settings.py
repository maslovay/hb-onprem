"""
Django settings for hbml_service project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import json

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

ALLOWED_HOSTS = ['0.0.0.0', 'localhost', 'hbml']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'coreapi',
    'rest_framework',
    'hbml_service.api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
]

ROOT_URLCONF = 'hbml_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'hbml_service.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# В этом сервисе не предполагается использования баз данных
# TODO: Django может быть оверкиллом, подумать о переходе на Flask/aiohttp
DATABASES = {}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False

USE_L10N = False

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [],
    'DEFAULT_AUTHENTICATION_CLASSES': []
}
# Перезапись env-переменной
DEBUG = os.environ.get('DEBUG', False)

try:
    ALLOWED_HOSTS = json.loads(os.environ.get('ALLOWED_HOSTS', str(ALLOWED_HOSTS)))
except Exception as e:
    pass

SECRET_KEY = os.environ.get('SECRET_KEY', 's0_s3cr3+_much_w0w')
DOCKER_DEFAULT_OPENVINO_FACEAPI_CONFIG = {
    "-m_lm": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/landmarks-regression-retail-0009/FP32/landmarks-regression-retail-0009.xml",
    "-m_hp": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/head-pose-estimation-adas-0001/FP32/head-pose-estimation-adas-0001.xml",
    "-m_fd": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/face-detection-retail-0004/FP32/face-detection-retail-0004.xml",
    "-m_reid": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/face-reidentification-retail-0095/FP32/face-reidentification-retail-0095.xml",
    "-m_ag": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/age-gender-recognition-retail-0013/FP32/age-gender-recognition-retail-0013.xml",
    "-m_em": "/opt/intel/computer_vision_sdk/deployment_tools/intel_models/emotions-recognition-retail-0003/FP32/emotions-recognition-retail-0003.xml",
    "-l": "/opt/intel/computer_vision_sdk/deployment_tools/inference_engine/lib/ubuntu_16.04/intel64/libcpu_extension_sse4.so"
}

OPENVINO_FACEAPI_CONFIG = json.loads(os.environ.get('OPENVINO_FACEAPI_CONFIG', '{}'))
if not OPENVINO_FACEAPI_CONFIG:
    OPENVINO_FACEAPI_CONFIG = DOCKER_DEFAULT_OPENVINO_FACEAPI_CONFIG
